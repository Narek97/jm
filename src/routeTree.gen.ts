/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthorizationCallbackImport } from './routes/authorization/callback'
import { Route as AuthenticatedSecondarySidebarLayoutImport } from './routes/_authenticated/_secondary-sidebar-layout'
import { Route as AuthenticatedPrimarySidebarLayoutImport } from './routes/_authenticated/_primary-sidebar-layout'
import { Route as AuthenticatedWorkspacesIndexImport } from './routes/_authenticated/workspaces/index'
import { Route as AuthenticatedPrimarySidebarLayoutAdminIndexImport } from './routes/_authenticated/_primary-sidebar-layout/admin/index'

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthorizationCallbackRoute = AuthorizationCallbackImport.update({
  id: '/authorization/callback',
  path: '/authorization/callback',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedSecondarySidebarLayoutRoute =
  AuthenticatedSecondarySidebarLayoutImport.update({
    id: '/_secondary-sidebar-layout',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedPrimarySidebarLayoutRoute =
  AuthenticatedPrimarySidebarLayoutImport.update({
    id: '/_primary-sidebar-layout',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedWorkspacesIndexRoute =
  AuthenticatedWorkspacesIndexImport.update({
    id: '/workspaces/',
    path: '/workspaces/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedPrimarySidebarLayoutAdminIndexRoute =
  AuthenticatedPrimarySidebarLayoutAdminIndexImport.update({
    id: '/admin/',
    path: '/admin/',
    getParentRoute: () => AuthenticatedPrimarySidebarLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_primary-sidebar-layout': {
      id: '/_authenticated/_primary-sidebar-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedPrimarySidebarLayoutImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_secondary-sidebar-layout': {
      id: '/_authenticated/_secondary-sidebar-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedSecondarySidebarLayoutImport
      parentRoute: typeof AuthenticatedImport
    }
    '/authorization/callback': {
      id: '/authorization/callback'
      path: '/authorization/callback'
      fullPath: '/authorization/callback'
      preLoaderRoute: typeof AuthorizationCallbackImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/workspaces/': {
      id: '/_authenticated/workspaces/'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof AuthenticatedWorkspacesIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_primary-sidebar-layout/admin/': {
      id: '/_authenticated/_primary-sidebar-layout/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedPrimarySidebarLayoutAdminIndexImport
      parentRoute: typeof AuthenticatedPrimarySidebarLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedPrimarySidebarLayoutRouteChildren {
  AuthenticatedPrimarySidebarLayoutAdminIndexRoute: typeof AuthenticatedPrimarySidebarLayoutAdminIndexRoute
}

const AuthenticatedPrimarySidebarLayoutRouteChildren: AuthenticatedPrimarySidebarLayoutRouteChildren =
  {
    AuthenticatedPrimarySidebarLayoutAdminIndexRoute:
      AuthenticatedPrimarySidebarLayoutAdminIndexRoute,
  }

const AuthenticatedPrimarySidebarLayoutRouteWithChildren =
  AuthenticatedPrimarySidebarLayoutRoute._addFileChildren(
    AuthenticatedPrimarySidebarLayoutRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedPrimarySidebarLayoutRoute: typeof AuthenticatedPrimarySidebarLayoutRouteWithChildren
  AuthenticatedSecondarySidebarLayoutRoute: typeof AuthenticatedSecondarySidebarLayoutRoute
  AuthenticatedWorkspacesIndexRoute: typeof AuthenticatedWorkspacesIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedPrimarySidebarLayoutRoute:
    AuthenticatedPrimarySidebarLayoutRouteWithChildren,
  AuthenticatedSecondarySidebarLayoutRoute:
    AuthenticatedSecondarySidebarLayoutRoute,
  AuthenticatedWorkspacesIndexRoute: AuthenticatedWorkspacesIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedSecondarySidebarLayoutRoute
  '/authorization/callback': typeof AuthorizationCallbackRoute
  '/workspaces': typeof AuthenticatedWorkspacesIndexRoute
  '/admin': typeof AuthenticatedPrimarySidebarLayoutAdminIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedSecondarySidebarLayoutRoute
  '/authorization/callback': typeof AuthorizationCallbackRoute
  '/workspaces': typeof AuthenticatedWorkspacesIndexRoute
  '/admin': typeof AuthenticatedPrimarySidebarLayoutAdminIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/_primary-sidebar-layout': typeof AuthenticatedPrimarySidebarLayoutRouteWithChildren
  '/_authenticated/_secondary-sidebar-layout': typeof AuthenticatedSecondarySidebarLayoutRoute
  '/authorization/callback': typeof AuthorizationCallbackRoute
  '/_authenticated/workspaces/': typeof AuthenticatedWorkspacesIndexRoute
  '/_authenticated/_primary-sidebar-layout/admin/': typeof AuthenticatedPrimarySidebarLayoutAdminIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/authorization/callback' | '/workspaces' | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/authorization/callback' | '/workspaces' | '/admin'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/_primary-sidebar-layout'
    | '/_authenticated/_secondary-sidebar-layout'
    | '/authorization/callback'
    | '/_authenticated/workspaces/'
    | '/_authenticated/_primary-sidebar-layout/admin/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthorizationCallbackRoute: typeof AuthorizationCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthorizationCallbackRoute: AuthorizationCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/authorization/callback"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/_primary-sidebar-layout",
        "/_authenticated/_secondary-sidebar-layout",
        "/_authenticated/workspaces/"
      ]
    },
    "/_authenticated/_primary-sidebar-layout": {
      "filePath": "_authenticated/_primary-sidebar-layout.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/_primary-sidebar-layout/admin/"
      ]
    },
    "/_authenticated/_secondary-sidebar-layout": {
      "filePath": "_authenticated/_secondary-sidebar-layout.tsx",
      "parent": "/_authenticated"
    },
    "/authorization/callback": {
      "filePath": "authorization/callback.tsx"
    },
    "/_authenticated/workspaces/": {
      "filePath": "_authenticated/workspaces/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/_primary-sidebar-layout/admin/": {
      "filePath": "_authenticated/_primary-sidebar-layout/admin/index.tsx",
      "parent": "/_authenticated/_primary-sidebar-layout"
    }
  }
}
ROUTE_MANIFEST_END */
